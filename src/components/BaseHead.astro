---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import {SITE_TITLE, AUTHOR_NAME, AUTHOR_URL, AUTHOR_HANDLE} from '../consts';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import type {ImageMetadata} from 'astro';
// Favicons for light/dark themes (as URLs)
import FaviconLightUrl from '../assets/favicon-light-theme.svg?url';
import FaviconDarkUrl from '../assets/favicon-dark-theme.svg?url';

type OGType = 'website' | 'article';
interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
	noIndex?: boolean;
	ogType?: OGType;
	publishedTime?: string | Date;
	modifiedTime?: string | Date;
}

const site = Astro.site ?? new URL('https://example.com');
const canonicalURL = new URL(Astro.url.pathname, site);

const {
	title,
	description,
	image = FallbackImage,
	noIndex = false,
	ogType = 'website',
	publishedTime,
	modifiedTime,
} = Astro.props as Props;
const fullTitle = `${title} | ${AUTHOR_NAME}`;
const pageUrl = new URL(Astro.url, site);
---

<!-- Global Metadata -->
<meta charset='utf-8' />
<meta name='viewport' content='width=device-width,initial-scale=1' />
<!-- Theme-aware favicons -->
<link
	rel='icon'
	type='image/svg+xml'
	media='(prefers-color-scheme: light)'
	href={FaviconLightUrl}
/>
<link
	rel='icon'
	type='image/svg+xml'
	media='(prefers-color-scheme: dark)'
	href={FaviconDarkUrl}
/>
<!-- Fallback favicon -->
<!-- <link rel='icon' type='image/svg+xml' href='/favicon.svg' /> -->
<link rel='sitemap' href='/sitemap-index.xml' />
<link
	rel='alternate'
	type='application/rss+xml'
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name='generator' content={Astro.generator} />

<!-- Font preloads -->
<link rel='preconnect' href='https://fonts.googleapis.com' />
<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
<link
	href='https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Space+Grotesk:wght@300..700&display=swap'
	rel='stylesheet'
/>

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Robots -->
<meta name='robots' content={noIndex ? 'noindex, nofollow' : 'index, follow'} />
<meta name='googlebot' content={noIndex ? 'noindex, nofollow' : 'index, follow'} />

<!-- Theme color -->
<meta name='theme-color' content='#111827' />

<!-- Primary Meta Tags -->
<title>{fullTitle}</title>
<meta name='title' content={fullTitle} />
<meta name='description' content={description} />
<meta name='author' content={AUTHOR_NAME} />
<meta name='publisher' content={AUTHOR_NAME} />
<meta name='copyright' content={`Â© ${new Date().getFullYear()} ${AUTHOR_NAME}`} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content={ogType} />
<meta property='og:url' content={pageUrl} />
<meta property='og:title' content={fullTitle} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image.src, pageUrl)} />
{ogType === 'article' && publishedTime && (
	<meta property='article:published_time' content={new Date(publishedTime).toISOString()} />
)}
{ogType === 'article' && modifiedTime && (
	<meta property='article:modified_time' content={new Date(modifiedTime).toISOString()} />
)}
<meta property='og:site_name' content={SITE_TITLE} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={pageUrl} />
<meta property='twitter:title' content={fullTitle} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image.src, pageUrl)} />
<meta name='twitter:creator' content={`@${AUTHOR_HANDLE}`} />
<meta name='twitter:site' content={`@${AUTHOR_HANDLE}`} />

<!-- Structured Data: Website + Breadcrumbs -->
<script type='application/ld+json'>{
	JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'WebSite',
		name: SITE_TITLE,
		url: String(site),
		author: {
			'@type': 'Person',
			name: AUTHOR_NAME,
			url: AUTHOR_URL,
		},
		inLanguage: 'en',
	})
}</script>
{ogType === 'article' && (
	<script type='application/ld+json'>{
		JSON.stringify({
			'@context': 'https://schema.org',
			'@type': 'BlogPosting',
			headline: title,
			name: title,
			description,
			image: [String(new URL(image.src, pageUrl))],
			author: { '@type': 'Person', name: AUTHOR_NAME, url: AUTHOR_URL },
			publisher: { '@type': 'Person', name: AUTHOR_NAME, url: AUTHOR_URL },
			datePublished: publishedTime ? new Date(publishedTime).toISOString() : undefined,
			dateModified: modifiedTime ? new Date(modifiedTime).toISOString() : undefined,
			mainEntityOfPage: { '@type': 'WebPage', '@id': String(pageUrl) },
		})
	}</script>
)}
<script type='application/ld+json'>{
	JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'BreadcrumbList',
		itemListElement: [
			{
				'@type': 'ListItem',
				position: 1,
				name: 'Home',
				item: String(site)
			},
			{
				'@type': 'ListItem',
				position: 2,
				name: title,
				item: String(pageUrl)
			}
		]
	})
}</script>
