---
import {type CollectionEntry, getCollection} from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import {render} from 'astro:content';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	// Sort chronologically (oldest -> newest) to compute neighbors
	const sorted = posts.sort(
		(a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
	);
	return sorted.map((post, index) => ({
		params: {slug: post.id},
		props: {
			post,
			prevId: index > 0 ? sorted[index - 1].id : null,
			nextId: index < sorted.length - 1 ? sorted[index + 1].id : null,
		},
	}));
}
type Props = CollectionEntry<'blog'>;

const {post, prevId, nextId} = Astro.props as any;
const {Content} = await render(post);

// Tiny helper to estimate reading time (~200wpm)
const getReadingTime = (content?: string) => {
	const words = content?.trim().split(/\s+/).length ?? 0;
	const minutes = Math.max(1, Math.round(words / 200));
	return `${minutes} min read`;
};
const readTime = getReadingTime(post.body);
---

<BlogPost
	{...post.data}
	prevHref={prevId && `/blog/${prevId}/`}
	nextHref={nextId && `/blog/${nextId}/`}
	readTime={readTime}
>
	<Content />
</BlogPost>
